from database.get_user_info import get_users_from_table
from database.models import *
from keyboards.inline.request_gender_inline import request_gender
from keyboards.reply.contact import get_contact
from loader import bot
from telebot.types import Message
from states.contact_information import UserInfoState


@bot.message_handler(commands=['survey'])
def survey(message: Message) -> None:
    bot.send_message(message.from_user.id, f'ü•≥–°–ø–∞—Å–∏–±–æ, –≤–∞–º –∑–∞ —Ç–æ, —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å!\n'
                                           f'üò∏–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ú–µ–Ω—è –∑–æ–≤—É—Ç –°—Ç—é–∞—Ä—Ç'
                                           f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è: ')
    bot.set_state(message.from_user.id, UserInfoState.name, message.chat.id)


@bot.message_handler(state=UserInfoState.name)
def get_name(message: Message) -> None:
    """ –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è """
    name = message.text
    if name.isalpha():

        bot.send_message(message.from_user.id, f'üëç–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 10 –¥–æ 120):')
        bot.set_state(message.from_user.id, UserInfoState.age, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['name'] = message.text

    else:
        bot.send_message(message.from_user.id, f'–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –±—É–∫–≤!')


@bot.message_handler(state=UserInfoState.age)
def get_age(message: Message) -> None:
    """ –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑—Ä–∞—Å—Ç """
    user_age = message.text
    if user_age.isdigit():
        if int(user_age) in range(10, 121):

            bot.send_message(message.from_user.id, f'–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª.',
                             reply_markup=request_gender())
            bot.set_state(message.from_user.id, UserInfoState.gender, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['age'] = message.text

        else:
            bot.send_message(message.from_user.id, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –≤—ã—à–ª–∏ –∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.'
                                                   f' –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –µ—â–µ —Ä–∞–∑.')
    else:
        bot.send_message(message.from_user.id, f'–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä.')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline_gender(call):
    """ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª """
    if call.message:
        gender = call.data
        bot.send_message(call.from_user.id, f'–ë–ª–∞–≥–æ–¥–∞—Ä—é!',
                         reply_markup=get_contact())
        with bot.retrieve_data(call.from_user.id) as data:
            data['gender'] = call.data

        bot.set_state(call.from_user.id, UserInfoState.phone_number)


@bot.message_handler(state=UserInfoState.phone_number, content_types='contact')
def reply_callback_phone(message: Message):
    """ –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ SqLite3 """
    if message.content_type == 'contact':
        with bot.retrieve_data(message.from_user.id) as data:
            data['contact'] = message.contact.phone_number

        User.create(telegram_id=message.from_user.id,
                    name=data['name'],
                    age=data['age'],
                    gender=data['gender'],
                    phone=data['contact']).save()

    get_users_from_table()

    bot.reply_to(message, f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['contact']}')
    bot.delete_state(message.from_user.id, message.chat.id)
